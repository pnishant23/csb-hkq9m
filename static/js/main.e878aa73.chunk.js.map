{"version":3,"sources":["components/FlashCard.js","components/FlashCardList.js","App.js","index.js"],"names":["FlashCard","FlashCardItem","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","answer","question","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashCardList","flashCards","id","App","setFlashCards","category","setCategory","loading","setLoading","helperText","setHelperText","categoryEl","numberEl","decodeStr","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","LOCAL_STORAGE_KEY","getFlashCards","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","e","preventDefault","params","amount","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","c","name","type","min","step","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e878aa73.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\n\nfunction FlashCard ({FlashCardItem}){\n  const [flip, setFlip] = useState(false)\n\n  const [height, setHeight] = useState('initial')\n\n  const frontEl = useRef()\n  const backEl = useRef()\n\n  function setMaxHeight (){\n    const frontHeight = frontEl.current.getBoundingClientRect().height\n\n    const backHeight = backEl.current.getBoundingClientRect().height\n    \n    setHeight(Math.max(frontHeight, backHeight, 100))\n  }\n\n  useEffect(()=>{\n    setMaxHeight()\n  },[FlashCardItem.answer, FlashCardItem.question, FlashCardItem.options])\n\n  useEffect(()=>{\n    window.addEventListener('resize', setMaxHeight)\n    return () => window.removeEventListener('resize', setMaxHeight)\n  },[])\n\n  return(\n    <>\n    <div className={ `card ${flip ? 'flip' : '' } ` } \n    style={{height:height}}\n    onClick={() => setFlip(!flip)}>\n    <div className='front' ref={frontEl}>\n      <div className='category'>category</div>\n      {FlashCardItem.question}\n      <div className='options'>\n        {FlashCardItem.options.map(option => {\n          return <div className='option' key={option}>{option}</div>\n        })}\n      </div>\n    </div>\n\n    <div className='back' ref={backEl}>{FlashCardItem.answer}</div>\n\n    </div>\n    </>\n  )\n}\n\nexport default FlashCard","import React from 'react'\nimport FlashCard from './FlashCard'\n\nfunction FlashCardList ({ flashCards }){\n  return(\n    <>\n      <div className='card-grid'>\n        {flashCards.map( FlashCardItem => {\n          return <FlashCard FlashCardItem={FlashCardItem} key={FlashCardItem.id}/>\n        })}\n      </div>\n    </>\n  )\n}\n\nexport default FlashCardList","import React, {useState,useEffect, useRef} from \"react\";\nimport FlashCardList from \"./components/FlashCardList\";\nimport \"./style.css\";\nimport 'axios'\nimport axios from \"axios\";\nimport { FaGithubAlt } from 'react-icons/fa'\n\nexport default function App() {\n\n  const [flashCards, setFlashCards] = useState([])\n\n  const [category, setCategory] = useState([])\n\n  const [loading, setLoading] = useState(false)\n\n  const [helperText, setHelperText] = useState(true)\n\n  const categoryEl = useRef()\n  const numberEl = useRef()\n\n  useEffect(()=>{\n    axios.get('https://opentdb.com/api_category.php')\n    .then(res => {\n      setCategory(res.data.trivia_categories)\n    })\n  },[])\n  \n  /*useEffect( () => {\n    setLoading(true)\n    axios.get('https://opentdb.com/api.php?amount=10')\n    .then( res => {\n      setFlashCards( res.data.results.map((questionItem, index) => {\n        const answer = questionItem.correct_answer\n        const options = [...questionItem.incorrect_answers.map(a => decodeStr(a)), answer]\n        return{\n          id:`${index}-${Date.now()}`,\n          question:decodeStr( questionItem.question),\n          answer: decodeStr( answer ),\n          options:options.sort(()=> Math.random() - .5)\n      \n        }\n      })\n      )\n      setLoading(false)\n    })\n  },[])*/\n\n  function decodeStr( str ){\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n  }\n\n  function handleSubmit(e){\n    e.preventDefault()\n    setLoading(true)\n    axios.get('https://opentdb.com/api.php', {\n      params:{\n        amount:numberEl.current.value,\n        category:categoryEl.current.value\n      }\n    })\n    .then( res => {\n      setFlashCards( res.data.results.map((questionItem, index) => {\n        const answer = questionItem.correct_answer\n        const options = [...questionItem.incorrect_answers.map(a => decodeStr(a)), answer]\n        return{\n          id:`${index}-${Date.now()}`,\n          question:decodeStr( questionItem.question),\n          answer: decodeStr( answer ),\n          options:options.sort(()=> Math.random() - .5)\n        }\n      })\n      )\n      setLoading(false)\n      setHelperText(false)\n    })\n\n  }\n\n  const LOCAL_STORAGE_KEY = 'flashCards.Quiz'\n\n\n  useEffect(()=>{\n    const getFlashCards = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n\n    if (getFlashCards) return setFlashCards(getFlashCards) \n  },[])\n\n  useEffect(()=>{\n    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(flashCards))\n    setHelperText(false)\n  },[flashCards])\n\n  return (\n    <>\n    <form className='header' onSubmit={handleSubmit}>\n      <div className='form-group'>\n        <label htmlFor='category'>category</label>\n        <select id='category' ref={categoryEl}>\n          {category.map(c => {\n            return <option value={c.id} key={c.id}>{c.name}</option>\n          })}\n        </select>\n      </div>\n      <div className='form-group'>\n        <label htmlFor='number'>Number of Ouestions</label>\n        <input type='number' id='number' min='1' step='1' min={1} defaultValue={10} ref={numberEl}/>\n      </div>\n      <div className='form-group'>\n        <button className='btn'>Generate</button>\n      </div>\n    </form>\n\n    <div className='container'>\n      { helperText ?\n      <div className='helperText'><p>'Select Category and number of questions and Tap Generate to view questions. <b/>For answer tap the question'</p></div> : null}\n\n      {loading ? <h1 className='loading-cnt'><div className='loading'></div></h1> :\n    <FlashCardList flashCards={flashCards }/>}\n    </div>\n    \n    <footer  className='footer'>\n      <p>Crafted with Passsion by Nishant Patil </p>\n      <span id='github'><a href='https://github.com/pnishant23'><FaGithubAlt/></a>\n      </span>\n    </footer>\n    </>\n  );\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}